<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Josh Kasuboski</title><link>https://www.joshkasuboski.com/</link><description>Recent content on Josh Kasuboski</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright Â© 2020, Josh Kasuboski</copyright><lastBuildDate>Sat, 25 Jan 2020 12:40:00 -0600</lastBuildDate><atom:link href="https://www.joshkasuboski.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Exporting Google Saved Places</title><link>https://www.joshkasuboski.com/posts/export-google-saved-places/</link><pubDate>Sat, 25 Jan 2020 12:40:00 -0600</pubDate><guid>https://www.joshkasuboski.com/posts/export-google-saved-places/</guid><description>&lt;p>I've made use of Google Saved Places for a while now. I have the standard &amp;ldquo;Starred&amp;rdquo;, &amp;ldquo;Want to go&amp;rdquo;, and &amp;ldquo;Favorites&amp;rdquo; lists as well as some specific to cities. Saved places is really convenient when you want to see places to go. I often look for want to go places to try something new or a favorite place if I can't quite remember the name of it.&lt;/p>
&lt;p>It's not all rosy though&amp;hellip;when searching for anything in Google Maps it inexplicably doesn't show you if the places returned are in any of your lists. They also recently made the interface better for adding places to multiple lists, but you can't search your places by city let alone type (say coffee shops I love). This could be accomplished by having many lists, however I'm not looking to manually manage a growing list of lists.&lt;/p>
&lt;h2 id="getting-the-data">Getting the data&lt;/h2>
&lt;p>I set out to pull my existing data out and address my struggles myself. There doesn't seem to be an API to access your saved places though. I had to resort to using &lt;a href="https://takeout.google.com">Google Takeout&lt;/a>, which if you haven't used before is quite interesting to see everything Google knows about you.&lt;/p>
&lt;p>Getting the data I wanted out of Takeout was a bit of trial and error. There are two options for Maps data as seen below, Maps and Maps (your places). Maps (your places) includes lists that aren't the starred list. Apparently, Google treats starred separately. I'm guessing this is because historically starred was the only option and was called saved. Another fun fact is that those starred places also show up at &lt;a href="https://google.com/bookmarks">Google Bookmarks&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://www.joshkasuboski.com/img/maps-export-products.png" alt="">&lt;/p>
&lt;p>If you only want your starred places from Maps you'll want to select &amp;ldquo;All Maps data included&amp;rdquo; and select only &amp;ldquo;My labeled places&amp;rdquo;. Running the export will get you a link to download a &lt;code>.zip&lt;/code> file. Once extracted, you'll have a variety of folders. The important files are &lt;code>Saved Places.json&lt;/code> and &lt;code>*.csv&lt;/code>.&lt;/p>
&lt;p>The Saved Places file will have your starred list in &lt;a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON&lt;/a> format. This format provides a pretty good amount of info like place name, location, and general categories. The csv files are a lot less useful by themselves. For me, it was just place name and a URL. However, the URL didn't seem to be parsable so this data wasn't super useful for me. Still, I was able to get all of the place names that I had saved.&lt;/p>
&lt;h2 id="enhance">Enhance!&lt;/h2>
&lt;p>For my saved places to be useful locally I wanted the name, address, categories, and general tags I could define. The geojson file had everything, but the tags. The csv files only provide a name, however. Enter the &lt;a href="https://developers.google.com/places/web-service/intro">Google Places API&lt;/a>. This API let's you lookup place data from Google, including all of the fields I want (besides user defined tags).&lt;/p>
&lt;p>Unfortunately, neither of the formats I exported from Google gave me the &lt;a href="https://developers.google.com/places/web-service/place-id">Place ID&lt;/a>, which would make it easy to lookup. The json file gave me a place name and address though so it's fairly easy to do a &lt;a href="https://developers.google.com/places/web-service/search">Place Search&lt;/a> using the name and address as the input. The csv files providing only the place name and obscure URL is a little more difficult.&lt;/p>
&lt;p>I ended up scraping the URL that was included for a string that looked like a Place ID. This definitely isn't perfect&amp;hellip;especially since I only look for one of at least two possible formats, but it seemed to work for my data.&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>So, I was able to get my saved places out of Google and tag them with the list they were on. I'm pretty much at the exact point I was at with Google Places minus the Google Maps integration.&lt;/p>
&lt;p>I want to build up an interface to add more tags easily as well as search places by those tags. Being able to see my places on a map after searching also seems pretty crucial.&lt;/p>
&lt;p>I'd also like to set up the ability to post this info to my site using &lt;a href="https://indieweb.org/Micropub">micropub&lt;/a>, but that presumes I have micropub set up here at all.&lt;/p>
&lt;p>The code I used to parse and save my data is on GitHub. It's a &lt;a href="https://en.wikipedia.org/wiki/Command-line_interface">cli&lt;/a> called &lt;a href="https://github.com/kasuboski/neptune">neptune&lt;/a>. At this time, it let's you import and tag places and it will export each place to a json file in a folder.&lt;/p></description></item><item><title>Replacing Feedly with Microsub?</title><link>https://www.joshkasuboski.com/posts/replacing-feedly/</link><pubDate>Wed, 15 Jan 2020 18:48:10 -0600</pubDate><guid>https://www.joshkasuboski.com/posts/replacing-feedly/</guid><description>&lt;p>I use &lt;a href="https://feedly.com">Feedly&lt;/a> to manage my content subscriptions, which include a number of bigger sites and personal blogs. Feedly is nice, but I would like to be able to save and use the data from there in other ways. So, I've been looking for an open source setup that I can tweak.&lt;/p>
&lt;p>I've been trying to utilize &lt;a href="https://indieweb.org">IndieWeb&lt;/a> pieces more and more. Their &lt;a href="https://indieweb.org/why">why&lt;/a> really resonates with some of my frustrations with the current web (mainly auth and data ownership/portability). This site supports &lt;a href="https://indieauth.com/">IndieAuth&lt;/a> so I can login at supporting websites by giving my URL. The posts and contact card are also marked up with &lt;a href="http://microformats.org/">microformat&lt;/a> to be parseable.&lt;/p>
&lt;h2 id="experimenting-with-aperture-and-monocle">Experimenting with Aperture and Monocle&lt;/h2>
&lt;p>I decided to use &lt;a href="https://aperture.p3k.io/">Aperture&lt;/a> for now as my &lt;a href="https://indieweb.org/Microsub">microsub&lt;/a> server. A microsub server is responsible for fetching the content you subscribe to and making it available in a common format for a microsub reader.&lt;/p>
&lt;p>I was able to login and subscribe to &lt;a href="https://aaronparecki.com/">Aaron Parecki's&lt;/a> personal site, which immediately loaded some 1600 entries for me. After adding a &lt;code>rel=microsub&lt;/code> link to my homepage, I was able to log into &lt;a href="https://monocle.p3k.io/">Monocle&lt;/a> and view that feed in my home channel. The default view for Monocle seems to be to show everything. There is an option to only show unread, but it's not what you get by default.&lt;/p>
&lt;h2 id="moving-forward">Moving forward&lt;/h2>
&lt;p>Monocle doesn't quite fit how I want to view updates, but it did help me understand the concepts better. The free hosted Aperture only saves your data for 7 days so I probably need to either host it myself or find a different microsub server.&lt;/p>
&lt;p>I've been looking at &lt;a href="https://github.com/pstuifzand/ekster">ekster&lt;/a>. I like that it's a go binary and comes with a CLI. It has the option of importing an opml feed, which Feedly would export. It seems all of your channels and feeds are stored in a config file (that you can generate with the opml import) and redis is really meant to be a cache.&lt;/p>
&lt;p>It does seem to support the &lt;a href="https://indieweb.org/Microsub-spec#Following">follow action&lt;/a> however and it doesn't look like that updates the file. In the future, I'll probably just try to run it and see what happens.&lt;/p>
&lt;p>Ekster also has a reader associated with it, but there are a number of &lt;a href="https://indieweb.org/Microsub#Clients">others&lt;/a> to try including mobile apps.&lt;/p></description></item><item><title>Now</title><link>https://www.joshkasuboski.com/now/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.joshkasuboski.com/now/</guid><description>&lt;blockquote>
&lt;p>A now page inspired by &lt;a href="https://sivers.org/nowff">Derek Sivers&amp;rsquo;&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Currently working on developer productivity tools at PNC.&lt;/p>
&lt;p>In my free time, I try to continue learning about all the things.&lt;/p>
&lt;p>My current interests are:&lt;/p>
&lt;ul>
&lt;li>Decentralized Services&lt;/li>
&lt;li>Self Hosting&lt;/li>
&lt;li>Quantified Self&lt;/li>
&lt;li>IndieWeb&lt;/li>
&lt;/ul>
&lt;p>My Tech Setup is:&lt;/p>
&lt;ul>
&lt;li>Pixel 3A&lt;/li>
&lt;li>2012 Macbook Pro Retina&lt;/li>
&lt;li>Custom Desktop (Ryzen 5 1600, 16gb, 1060)&lt;/li>
&lt;/ul></description></item><item><title>Cheap Managed Kubernetes with Terraform</title><link>https://www.joshkasuboski.com/posts/cheap-managed-kube/</link><pubDate>Thu, 18 Apr 2019 14:15:59 -0600</pubDate><guid>https://www.joshkasuboski.com/posts/cheap-managed-kube/</guid><description>&lt;p>Kubernetes is a great way to deploy your services in a scalable and reliable way. However, it's a pretty complex system to manage yourself. Thankfully, cloud providers are offering managed versions where you only pay for the worker nodes.&lt;/p>
&lt;p>We'll use &lt;a href="https://cloud.google.com/kubernetes-engine/">GKE&lt;/a>, Google's managed kubernetes offering, to deploy a cluster so we can test out kubernetes.&lt;/p>
&lt;p>We'll use &lt;a href="https://www.terraform.io/">Terraform&lt;/a> to make sure we have a repeatable deployment process.&lt;/p>
&lt;p>If you just want to skip to the code it's on &lt;a href="https://github.com/kasuboski/cheap-managed-kubernetes">GitHub&lt;/a>.&lt;/p>
&lt;h2 id="what-well-do">What we'll do&lt;/h2>
&lt;p>The resources we'll deploy use the Google Cloud &lt;a href="https://cloud.google.com/free/">free-tier&lt;/a> extensively. If you leave it running, it should cost a little over $5 a month.&lt;/p>
&lt;p>If you're not familiar with Terraform or haven't used the Google Provider, you can get started &lt;a href="https://www.terraform.io/docs/providers/google/getting_started.html">here&lt;/a>. All of the resources it deploys will be in the free tier.&lt;/p>
&lt;p>Terraform has a concept of remote backends which allow you to save the state of your deployments (not just on your machine). This is especially helpful if you have multiple team members.&lt;/p>
&lt;p>Since we're already using Google Cloud we can use Google Cloud Storage to house our state. After changing some defaults we can run a few commands and have our cluster running.&lt;/p>
&lt;h2 id="actually-do-it">Actually do it&lt;/h2>
&lt;ul>
&lt;li>Create a Google Cloud Storage Bucket following these &lt;a href="https://cloud.google.com/storage/docs/creating-buckets">instructions&lt;/a>&lt;/li>
&lt;li>Clone the cheap-managed-kubernetes &lt;a href="https://github.com/kasuboski/cheap-managed-kubernetes">repo&lt;/a>&lt;/li>
&lt;li>Modify &lt;code>terraform.tfvars.example&lt;/code> with your gcp project and rename to &lt;code>terraform.tfvars&lt;/code>&lt;/li>
&lt;li>Modify &lt;code>backend.hcl.example&lt;/code> with the gcs bucket you created above and rename to &lt;code>backend.hcl.example&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>You should now be set up to deploy with Terraform. We'll initialize Terraform with our remote backend and run a plan. This plan will output what will be created (or destroyed). You can verify the output of the plan is correct and then run the apply.&lt;/p>
&lt;ul>
&lt;li>&lt;code>terraform init -backend-config=backend.hcl&lt;/code>&lt;/li>
&lt;li>&lt;code>terraform plan&lt;/code> This should say it will create a cluster and node pool.&lt;/li>
&lt;li>&lt;code>terraform apply&lt;/code> This will actually create the cluster and node pool.&lt;/li>
&lt;li>When you're done &lt;code>terraform destroy&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="using-your-cluster">Using your cluster&lt;/h2>
&lt;p>The output of the apply will give you the info you need to create a &lt;code>kubeconfig&lt;/code> to be able to connect to your cluster. Since we're using GKE though, I find it easier to just use the &lt;code>gcloud&lt;/code> command that will set your &lt;code>kubeconfig&lt;/code> for you.&lt;/p>
&lt;p>It should look something like &lt;code>gcloud container clusters get-credentials my-poor-gke-cluster&lt;/code> where &lt;code>my-poor-gke-cluster&lt;/code> is the name of the cluster resource in &lt;code>main.tf&lt;/code>&lt;/p>
&lt;p>Once you have your &lt;code>kubeconfig&lt;/code> set up, you can access your cluster like you normally would. Maybe try running &lt;code>kubectl get pods --all-namespaces&lt;/code>. You should see the pods that make up &lt;code>kube-system&lt;/code>.&lt;/p></description></item><item><title>About</title><link>https://www.joshkasuboski.com/about/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.joshkasuboski.com/about/</guid><description>&lt;h1 id="hi-there">Hi there&lt;/h1>
&lt;p>My name is Josh and I'm a software engineer. I work on all manner of things across mobile, web, and backend apps.&lt;/p>
&lt;p>Right now, my main interest is improving the developer experience and making development more accessible to take code from laptop to production.&lt;/p>
&lt;p>This involves making pipelines, eliminating boilerplate, and sending messages to make sure it's painless to deploy your code.&lt;/p>
&lt;p>You can find me on &lt;a href="https://github.com/kasuboski">Github&lt;/a> or &lt;a href="https://www.linkedin.com/in/joshkasuboski/">LinkedIn&lt;/a>&lt;/p>
&lt;p>Here is a &lt;a href="https://www.joshkasuboski.com/resume.html">resume&lt;/a>&lt;/p></description></item></channel></rss>